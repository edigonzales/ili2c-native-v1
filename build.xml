<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="bindist" name="ili2c" xmlns:artifact="antlib:org.apache.maven.artifact.ant">

  <!-- set global properties for this build -->
  <property name="src" value="${basedir}/src"/>
  <property name="src-core" value="${basedir}/src-core"/>
  <property name="build" value="${basedir}/build"/>
  <property name="dist" value="${basedir}/dist"/>
  <property name="antlr" value="${basedir}/lib/antlr-2.7.7.jar"/>
  <!-- property name="antlr" value="${basedir}/lib/antlr-4.7.2-complete.jar"/ -->
  <property name="antlrRuntime" value="${basedir}/lib/antlr-2.7.7.jar"/>
  <!-- property name="antlrRuntime" value="${basedir}/lib/antlr-runtime-4.7.2.jar"/ -->
  
  <property name="antlrTool" value="antlr.Tool"/>
  <!-- property name="antlrTool" value="org.antlr.v4.Tool"/ -->
  <property file="user.properties" prefix="user."/>
  <property name="groupId" value="ch.interlis"/>
  <property name="release" value=""/>

  <target name="init">
    <!-- Create the time stamp -->
    <tstamp/>
    <property name="projectjar" value="${build}/jar/${ant.project.name}.jar"/>
    <property name="versionfile" value="${src-core}/ch/interlis/ili2c/Version.properties"/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build}"/>
    <mkdir dir="${build}/jar"/>
    <mkdir dir="${dist}"/>
  </target>
  <target depends="init,buildnr" name="pom">
		<artifact:pom id="pomE-core" groupId="${groupId}" artifactId="ili2c-core" version="${buildnr}" name="ili2c-core">
			<artifact:dependency groupId="ch.ehi" artifactId="ehibasics" version="1.3.0"/>
		</artifact:pom>
		  <artifact:writepom pomRefId="pomE-core" file="build/pom-core.xml"/>
		<artifact:pom id="pom-core" file="build/pom-core.xml" />
		<artifact:pom id="pomE-tool" groupId="${groupId}" artifactId="ili2c-tool" version="${buildnr}" name="ili2c-tool">
			<artifact:dependency groupId="ch.interlis" artifactId="ili2c-core" version="${buildnr}"/>
			<artifact:dependency groupId="ch.interlis" artifactId="iox-api" version="1.0.3"/>
			<artifact:dependency groupId="ch.interlis" artifactId="iox-ili" version="1.21.0"/>
			<artifact:dependency groupId="antlr" artifactId="antlr" version="2.7.7"/>
			<!-- artifact:dependency groupId="org.antlr" artifactId="antlr4" version="4.7.2"/ -->
		</artifact:pom>
		  <artifact:writepom pomRefId="pomE-tool" file="build/pom-tool.xml"/>
		<artifact:pom id="pom-tool" file="build/pom-tool.xml" />
  </target>  
  <target depends="init,pom" name="install">
	  <artifact:install file="build/jar/ili2c-core.jar">
		<artifact:pom refid="pom-core"/>
	  </artifact:install>
	  <artifact:install file="build/jar/ili2c-tool.jar">
		<artifact:pom refid="pom-tool"/>
	  </artifact:install>
  </target>
  <target depends="init,pom,deploy-core" name="deploy">
	  <artifact:deploy file="build/jar/ili2c-tool.jar">
		<remoteRepository url="ftp://ftp.interlis.ch">
			<authentication username="${user.repos_usr}" password="${user.repos_pwd}"/>
		</remoteRepository>
		<pom refid="pom-tool"/>
		<attach file="${dist}/${ant.project.name}-${buildnr}.zip" type="zip" classifier="bindist"/>
	  </artifact:deploy>    
  </target>
  <target depends="init,pom" name="deploy-core">
	  <artifact:install-provider artifactId="wagon-ftp" version="3.0.0"/>
	  <artifact:deploy file="build/jar/ili2c-core.jar">
		<remoteRepository url="ftp://ftp.interlis.ch">
			<authentication username="${user.repos_usr}" password="${user.repos_pwd}"/>
		</remoteRepository>
		<pom refid="pom-core"/>
	  </artifact:deploy>    
  </target>
  
  <target depends="init" name="buildnr">
    <property file="${versionfile}" prefix="buildnr."/>
    <condition property="branch" value=".${buildnr.versionBranch}" else="">
       <length string="${buildnr.versionBranch}" trim="true" when="greater" length="0"/>
    </condition>
    <condition property="SNAPSHOT" value="" else="-SNAPSHOT">
       <length string="${release}" trim="true" when="greater" length="0"/>
    </condition>
    <property name="buildnr" value="${buildnr.versionMajor}.${buildnr.versionMinor}.${buildnr.versionMicro}${branch}${SNAPSHOT}"/>
    <!-- <property name="buildnr" value="${DSTAMP}"/> -->
  </target>

  <target depends="init" name="genparser24">
    <mkdir dir="${build}/src/ch/interlis/ili2c/parser"/>
    <java classname="${antlrTool}" classpath="${java.class.path};${antlr}" fork="yes">
    	<arg value="-o"/>
        <arg value="${build}/src/ch/interlis/ili2c/parser"/>
    	<!-- <arg value="-diagnostic"/> -->
    	<arg value="${src-core}/ch/interlis/ili2c/parser/interlis24.g"/>
    </java>
  </target>
  
  <target depends="init" name="genparser23">
    <mkdir dir="${build}/src/ch/interlis/ili2c/parser"/>
    <java classname="${antlrTool}" classpath="${java.class.path};${antlr}" fork="yes">
    	<arg value="-o"/>
        <arg value="${build}/src/ch/interlis/ili2c/parser"/>
    	<!-- <arg value="-diagnostic"/> -->
    	<arg value="${src-core}/ch/interlis/ili2c/parser/interlis23.g"/>
    </java>
  </target>
  
  <target depends="init" name="genparser22">
    <mkdir dir="${build}/src/ch/interlis/ili2c/parser"/>
    <java classname="${antlrTool}" classpath="${java.class.path};${antlr}" fork="yes">
    	<arg value="-o"/>
        <arg value="${build}/src/ch/interlis/ili2c/parser"/>
    	<arg value="${src-core}/ch/interlis/ili2c/parser/interlis22.g"/>
    </java>
  </target>
  
  <target depends="init" name="genmetavalue">
    <mkdir dir="${build}/src/ch/interlis/ili2c/parser"/>
    <java classname="${antlrTool}" classpath="${java.class.path};${antlr}" fork="yes">
    	<arg value="-o"/>
        <arg value="${build}/src/ch/interlis/ili2c/parser"/>
    	<arg value="${src-core}/ch/interlis/ili2c/parser/metavalue.g"/>
    </java>
  </target>
  
  <target depends="init" name="genparser1">
    <mkdir dir="${build}/src/ch/interlis/ili2c/parser"/>
    <java classname="${antlrTool}" classpath="${java.class.path};${antlr}" fork="yes">
    	<arg value="-o"/>
        <arg value="${build}/src/ch/interlis/ili2c/parser"/>
    	<arg value="${src-core}/ch/interlis/ili2c/parser/interlis1.g"/>
    </java>
  </target>

  <target depends="init" name="genmodelscan">
    <mkdir dir="${build}/src/ch/interlis/ili2c/parser"/>
    <java classname="${antlrTool}" classpath="${java.class.path};${antlr}" fork="yes">
    	<arg value="-o"/>
        <arg value="${build}/src/ch/interlis/ili2c/parser"/>
    	<!--  <arg value="-diagnostic"/> -->
    	<arg value="${src-core}/ch/interlis/ili2c/parser/modelscan.g"/>
    </java>
  </target>
  
  <target depends="init" name="ili1undef">
    <mkdir dir="${build}/src/ch/interlis/ili2c/parser"/>
    <java classname="${antlrTool}" classpath="${java.class.path};${antlr}" fork="yes">
    	<arg value="-o"/>
        <arg value="${build}/src/ch/interlis/ili2c/parser"/>
    	<arg value="${src-core}/ch/interlis/ili2c/parser/ili1undef.g"/>
    </java>
  </target>

  <target depends="init,genparser24,genparser1,genparser22,genparser23,genmetavalue,genmodelscan,ili1undef" name="compile-core">
    <!-- Compile the java code from ${src} into ${build}/classes -->
    <mkdir dir="${build}/classes-core"/>
    <javac destdir="${build}/classes-core" debug="on"  source="1.6" target="1.6" encoding="US-ASCII" includeantruntime="false">
      <classpath>
        <!-- <pathelement location="src-hd53/classes"/> -->
        <pathelement location="${antlrRuntime}"/>
        <!-- pathelement location="lib/xerces.jar"/ -->
        <pathelement location="lib/ehibasics.jar"/>
      </classpath>
    	<src path="${src-core}" />
    	<src path="${build}/src"/>
    </javac>


  </target>

  <target depends="init,compile-core" name="compile">
    <!-- Compile the java code from ${src} into ${build}/classes -->
    <mkdir dir="${build}/classes"/>
    <javac destdir="${build}/classes" debug="on"  source="1.6" target="1.6" encoding="US-ASCII" includeantruntime="false">
      <classpath>
        <pathelement location="${build}/classes-core"/>
        <pathelement location="${antlrRuntime}"/>
        <!-- pathelement location="lib/xerces.jar"/ -->
        <pathelement location="lib/ehibasics.jar"/>
        <pathelement location="lib/iox-ili.jar"/>
        <pathelement location="lib/iox-api.jar"/>
      </classpath>
    	<src path="${src}" />
    </javac>


  </target>
  

  <target depends="init" name="javadocs">
    <mkdir dir="${build}/javadoc"/>
    <javadoc Public="true" Windowtitle="INTERLIS Compiler" destdir="${build}/javadoc" packagenames="ch.interlis.ili2c,ch.interlis.ili2c.metamodel,ch.interlis.ili2c.config">
    	<sourcepath path="${src}"/>
    	<sourcepath path="${src-core}"/>
	</javadoc>
  </target>

  <target depends="srcdist,bindist" name="dist"/>

  <target depends="init,compile,jar-core" name="jar">

    <jar jarfile="${build}/jar/${ant.project.name}-tool.jar">
	<!-- fileset dir="${build}/classes" excludes="ch/interlis/ili2c/tests/**/*.class,ch/interlis/models/**/*.class,ch/interlis/ili2c/parser/**/*.class,ch/interlis/ili2c/generator/**/*.class,ch/interlis/ili2c/modelscan/**/*.class,ch/interlis/ili2c/metamodel/**/*.class,ch/interlis/ili2c/config/**/*.class,ch/interlis/ili2c/CompilerLogEvent.class,ch/interlis/ili2c/Ili2cException.class,ch/interlis/ili2c/Ili2cFailure.class,ch/interlis/ili2c/gui/UserSettings.class,ch/interlis/ilirepository/ReposManager.class,ch/interlis/ilirepository/impl/RepositoryAccessException.class,ch/interlis/ilirepository/Dataset.class" includes="**/*.class"/ -->
	<fileset dir="${build}/classes"  includes="**/*.class"/>
    	<fileset dir="${src}" includes="**/*.xsd"/>
    	<fileset dir="${src}" includes="**/*.properties"/>
    	<fileset dir="${src}" includes="**/iom/AliasTable.txt"/>
    </jar>

    <jar jarfile="${projectjar}" manifest="other/manifest">
		<!-- fileset dir="${build}/classes" excludes="ch/interlis/ili2c/tests/**/*.class" includes="**/*.class"/>
    	<fileset dir="${src-core}" includes="**/*.properties"/>
    	<fileset dir="${src}" includes="**/*.properties"/>
    	<fileset dir="${src}" includes="**/*.xsd"/>
    	<fileset dir="${src}" includes="**/iom/AliasTable.txt"/ -->
    	<zipfileset src="${antlrRuntime}"/>
    	<!-- zipfileset src="lib/xerces.jar"/>
    	<zipfileset src="lib/xmlParserAPIs.jar"/ -->
    	<zipfileset src="lib/ehibasics.jar"/>
    	<zipfileset src="lib/iox-api.jar"/>
    	<zipfileset src="lib/iox-ili.jar"/>
        <zipfileset src="${build}/jar/${ant.project.name}-tool.jar"/>
        <zipfileset src="${build}/jar/${ant.project.name}-core.jar"/>
    </jar>
  </target>
  <target depends="init,compile-core,copyres" name="jar-core">
    <propertyfile file="${versionfile}">
	<!-- <entry  key="versionMicro" type="int" value="1" operation="+"/> -->
	<entry  key="versionDate" type="date" value="now" pattern="yyyyMMdd"/>
    </propertyfile>

    <jar jarfile="${build}/jar/${ant.project.name}-core.jar">
	<!-- fileset dir="${build}/classes" excludes="ch/interlis/ili2c/tests/**/*.class" includes="ch/interlis/models/**/*.class,ch/interlis/ili2c/parser/**/*.class,ch/interlis/ili2c/generator/**/*.class,ch/interlis/ili2c/modelscan/**/*.class,ch/interlis/ili2c/metamodel/**/*.class,ch/interlis/ili2c/config/**/*.class,ch/interlis/ili2c/CompilerLogEvent.class,ch/interlis/ili2c/Ili2cException.class,ch/interlis/ili2c/Ili2cFailure.class,ch/interlis/ili2c/gui/UserSettings.class,ch/interlis/ilirepository/ReposManager.class,ch/interlis/ilirepository/impl/RepositoryAccessException.class,ch/interlis/ilirepository/Dataset.class"/--> 
	<fileset dir="${build}/classes-core" excludes="ch/interlis/ili2c/tests/**/*.class" />
    	<fileset dir="${src-core}" includes="**/*.properties"/>
    </jar>
  </target>
  <target depends="init,buildnr" name="bindist">
	<delete file="${dist}/${ant.project.name}-${buildnr}.zip" quiet="true"/>
    <zip zipfile="${dist}/${ant.project.name}-${buildnr}.zip">
    	<zipfileset dir="." includes="build/jar/ili2c.jar" fullpath="${ant.project.name}-${buildnr}/${ant.project.name}.jar"/>
    	<zipfileset dir="." includes="src/**/syntax23.txt" fullpath="${ant.project.name}-${buildnr}/doc/syntax23.txt"/>
    	<zipfileset dir="." prefix="${ant.project.name}-${buildnr}">
    		<patternset includes="doc/CHANGELOG.txt"/>
	    	<patternset includes="doc/LICENSE.*"/>
		<patternset includes="doc/README.txt"/>
		<patternset includes="doc/index.html"/>
		<!-- <patternset includes="examples/**/*.ili"/>
		<patternset includes="examples/**/*.xml"/> -->
		<patternset includes="standard/**/*.ili"/>
		<patternset includes="xsd/**/*.xsd"/>
		<patternset includes="iliuml/*.uml"/>
	</zipfileset>
    </zip>
  </target>
  <target depends="init" name="srcdocdist">
	<delete file="${dist}/${ant.project.name}-${DSTAMP}.srcdoc.zip" quiet="true"/>
    <zip zipfile="${dist}/${ant.project.name}-${DSTAMP}.srcdoc.zip">
    	<zipfileset dir="." prefix="${ant.project.name}-${DSTAMP}">
	    	<patternset includes="build/javadoc/**"/>
    	</zipfileset>
    </zip>
  </target>
  <target depends="init" name="jeditdist">
	<delete file="${dist}/jeditmacro-${DSTAMP}.zip" quiet="true"/>
    <zip zipfile="${dist}/jeditmacro-${DSTAMP}.zip">
    	<zipfileset dir="." includes="jedit/interlis.xml" fullpath="jeditmacro-${DSTAMP}/interlis.xml"/>
    	<zipfileset dir="." includes="jedit/readme.txt" fullpath="jeditmacro-${DSTAMP}/readme.txt"/>
    	<zipfileset dir="." includes="jedit/Compile.bsh" fullpath="jeditmacro-${DSTAMP}/Compile.bsh"/>
    </zip>
  </target>
  
  <target depends="init,buildnr" name="srcdist">
    <delete file="${dist}/${ant.project.name}-${buildnr}.src.zip" quiet="true"/>
    <zip zipfile="${dist}/${ant.project.name}-${buildnr}.src.zip">
    	<zipfileset dir="." prefix="${ant.project.name}-${buildnr}">
	    	<patternset includes="build.xml"/>
	    	<patternset includes="lib/*.jar"/>
	    	<patternset includes="other/manifest"/>
	    	<patternset includes="src/**/*.java" excludes="**/bak~/*.java"/>
	    	<patternset includes="src-core/**/*.java" excludes="**/bak~/*.java"/>
	    	<patternset includes="src/**/*.xsd"/>
	    	<patternset includes="src/**/*.properties"/>
	    	<patternset includes="src-core/**/*.properties"/>
		<patternset includes="src/**/iom/AliasTable.txt"/>
	    	<patternset includes="${build}/src/**/*.java"/>
	    	<patternset includes="src/**/*.g"/>
	    	<patternset includes="doc/LICENSE.*"/>
		<patternset includes="doc/CHANGELOG.txt"/>
		<patternset includes="doc/README.txt"/>
		<patternset includes="doc/README.src.txt"/>
		<patternset includes="doc/index.html"/>
		<patternset includes="examples/**/*.ili"/>
		<patternset includes="examples/**/*.xml"/>
		<patternset includes="standard/**/*.ili"/>
		<patternset includes="xsd/**/*.xsd"/>
		<patternset includes="iliuml/*.uml"/>
    	</zipfileset>
    </zip>
  </target>

  <target name="clean">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build}"/>
  </target>

  <target depends="init" name="copyres">

    <copy toDir="${build}/classes">
    	<fileset dir="${src-core}" includes="**/*.properties"/>
    	<fileset dir="${src}" includes="**/*.properties"/>
    	<fileset dir="${src}" includes="**/*.gif"/>
    </copy>
  </target>

</project>
